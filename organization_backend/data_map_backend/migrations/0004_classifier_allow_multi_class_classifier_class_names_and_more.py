# Generated by Django 4.2.7 on 2023-11-23 17:43

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('data_map_backend', '0003_dataset_is_public_historicaldataset_is_public_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='classifier',
            name='allow_multi_class',
            field=models.BooleanField(default=False, verbose_name='Allow multi class'),
        ),
        migrations.AddField(
            model_name='classifier',
            name='class_names',
            field=models.JSONField(blank=True, null=True, verbose_name='Class Names'),
        ),
        migrations.AddField(
            model_name='classifier',
            name='dataset',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='data_map_backend.dataset', verbose_name='Dataset'),
        ),
        migrations.AddField(
            model_name='classifier',
            name='default_threshold',
            field=models.FloatField(default=0.5, verbose_name='Default Threshold'),
        ),
        migrations.AddField(
            model_name='classifier',
            name='is_binary',
            field=models.BooleanField(default=False, verbose_name='Is binary'),
        ),
        migrations.AddField(
            model_name='classifier',
            name='negative_annotation_field',
            field=models.ForeignKey(blank=True, help_text='binary: bool field, exclusive: single tag, non-exclusive: tag array field', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='data_map_backend.objectfield', verbose_name='Negative Annotation Field'),
        ),
        migrations.AddField(
            model_name='classifier',
            name='parent_classifiers',
            field=models.ManyToManyField(blank=True, to='data_map_backend.classifier', verbose_name='Parent Classifiers'),
        ),
        migrations.AddField(
            model_name='classifier',
            name='per_class_thresholds',
            field=models.JSONField(blank=True, null=True, verbose_name='Per Class Thresholds'),
        ),
        migrations.AddField(
            model_name='classifier',
            name='positive_annotation_field',
            field=models.ForeignKey(blank=True, help_text='binary: bool field, exclusive: single tag, non-exclusive: tag array field', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='data_map_backend.objectfield', verbose_name='Positive Annotation Field'),
        ),
        migrations.AddField(
            model_name='classifier',
            name='relevant_object_fields',
            field=models.ManyToManyField(blank=True, help_text='For given examples from this dataset', related_name='+', to='data_map_backend.objectfield', verbose_name='Relevant Object Fields'),
        ),
        migrations.AddField(
            model_name='classifier',
            name='trained_classifiers',
            field=models.JSONField(blank=True, help_text="For each embedding space, and there for each class, a 'decision' vector to be applied with dotproduct (plus time_updated)", null=True, verbose_name='Trained Classifiers'),
        ),
        migrations.AddField(
            model_name='historicalclassifier',
            name='allow_multi_class',
            field=models.BooleanField(default=False, verbose_name='Allow multi class'),
        ),
        migrations.AddField(
            model_name='historicalclassifier',
            name='class_names',
            field=models.JSONField(blank=True, null=True, verbose_name='Class Names'),
        ),
        migrations.AddField(
            model_name='historicalclassifier',
            name='dataset',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.dataset', verbose_name='Dataset'),
        ),
        migrations.AddField(
            model_name='historicalclassifier',
            name='default_threshold',
            field=models.FloatField(default=0.5, verbose_name='Default Threshold'),
        ),
        migrations.AddField(
            model_name='historicalclassifier',
            name='is_binary',
            field=models.BooleanField(default=False, verbose_name='Is binary'),
        ),
        migrations.AddField(
            model_name='historicalclassifier',
            name='negative_annotation_field',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='binary: bool field, exclusive: single tag, non-exclusive: tag array field', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.objectfield', verbose_name='Negative Annotation Field'),
        ),
        migrations.AddField(
            model_name='historicalclassifier',
            name='per_class_thresholds',
            field=models.JSONField(blank=True, null=True, verbose_name='Per Class Thresholds'),
        ),
        migrations.AddField(
            model_name='historicalclassifier',
            name='positive_annotation_field',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='binary: bool field, exclusive: single tag, non-exclusive: tag array field', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.objectfield', verbose_name='Positive Annotation Field'),
        ),
        migrations.AddField(
            model_name='historicalclassifier',
            name='trained_classifiers',
            field=models.JSONField(blank=True, help_text="For each embedding space, and there for each class, a 'decision' vector to be applied with dotproduct (plus time_updated)", null=True, verbose_name='Trained Classifiers'),
        ),
        migrations.CreateModel(
            name='ClassifierExample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Date added')),
                ('is_positive', models.BooleanField(default=True, verbose_name='Is positive')),
                ('classes', models.JSONField(blank=True, null=True, verbose_name='Classes')),
                ('field_type', models.CharField(choices=[('TEXT', 'Text'), ('IDENTIFIER', 'Identifier'), ('FLOAT', 'Float'), ('INTEGER', 'Integer'), ('DATE', 'Date'), ('DATETIME', 'Datetime'), ('TIME', 'Time'), ('VECTOR', 'Vector'), ('CLASS_PROBABILITY', 'Class Probability'), ('FACE', 'Face'), ('URL', 'URL'), ('GEO_COORDINATES', 'Geo Coordinates'), ('TAG', 'Tag'), ('IMAGE', 'Image'), ('AUDIO', 'Audio'), ('VIDEO', 'Video'), ('FOREIGN_KEY', 'Reference to other element'), ('BOOL', 'Bool'), ('ATTRIBUTES', 'Attributes (dict)'), ('ARBITRARY_OBJECT', 'Non-indexed object')], default='TEXT', help_text='Either IDENTIFIER, TEXT, IMAGE', max_length=50, verbose_name='Type')),
                ('value', models.TextField(blank=True, help_text='Item ID, Text, Image URL', null=True, verbose_name='Value')),
                ('weight', models.FloatField(default=1.0, help_text='Weight for this example (e.g. small if just a product page view, high if product was bought)', verbose_name='Weight')),
                ('classifier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_map_backend.classifier', verbose_name='Classifier')),
            ],
            options={
                'verbose_name': 'Classifier Example',
                'verbose_name_plural': 'Classifier Examples',
            },
        ),
    ]
