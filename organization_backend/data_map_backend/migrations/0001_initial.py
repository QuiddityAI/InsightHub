# Generated by Django 5.0.6 on 2024-05-16 14:30

import data_map_backend.models
import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'auth_user',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmbeddingSpace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('dimensions', models.IntegerField(help_text='Vector size of the embedding', verbose_name='Dimensions')),
            ],
            options={
                'verbose_name': 'Embedding Space',
                'verbose_name_plural': 'Embedding Spaces',
            },
        ),
        migrations.CreateModel(
            name='ExportConverter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(max_length=200, verbose_name='Name')),
                ('identifier', models.CharField(max_length=200, unique=True, verbose_name='Identifier')),
                ('universally_applicable', models.BooleanField(default=False, help_text='Whether this converter is applicable to all datasets', verbose_name='Universally Applicable')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('module', models.CharField(max_length=200, verbose_name='Code Module Name')),
                ('parameters', models.JSONField(blank=True, default=dict, null=True, verbose_name='Parameters')),
                ('preview_as_text', models.BooleanField(default=False, help_text='If the result should be shown in the UI as text in addition to a download link', verbose_name='Preview as text')),
            ],
            options={
                'verbose_name': 'Export Converter',
                'verbose_name_plural': 'Export Converters',
            },
        ),
        migrations.CreateModel(
            name='ImportConverter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(max_length=200, verbose_name='Name')),
                ('identifier', models.CharField(max_length=200, verbose_name='Identifier')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('module', models.CharField(max_length=200, verbose_name='Code Module Name')),
                ('parameters', models.JSONField(blank=True, default=dict, null=True, verbose_name='Parameters')),
                ('example_file_url', models.CharField(blank=True, max_length=200, null=True, verbose_name='Example File URL')),
            ],
            options={
                'verbose_name': 'Import Converter',
                'verbose_name_plural': 'Import Converters',
            },
        ),
        migrations.CreateModel(
            name='DataCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('is_public', models.BooleanField(default=False, verbose_name='Is public')),
                ('is_binary', models.BooleanField(default=False, verbose_name='Is binary')),
                ('allow_multi_class', models.BooleanField(default=False, verbose_name='Allow multi class')),
                ('class_names', models.JSONField(blank=True, default=data_map_backend.models.class_field_default, help_text='Minimal list of classes shown in the UI, even if no items are present. More classes are deducted from items.', null=True, verbose_name='Class Names')),
                ('default_threshold', models.FloatField(default=0.5, verbose_name='Default Threshold')),
                ('per_class_thresholds', models.JSONField(blank=True, help_text='block classes e.g. from parents, using weight of -1', null=True, verbose_name='Per Class Thresholds')),
                ('items_last_changed', models.JSONField(blank=True, default=dict, help_text='For each class, the last time an item was added or removed', null=True, verbose_name='Items Last Changed')),
                ('extraction_questions', models.JSONField(blank=True, default=list, null=True, verbose_name='Extraction Questions')),
                ('table_columns', models.JSONField(blank=True, default=list, null=True, verbose_name='Table Columns')),
                ('current_extraction_processes', models.JSONField(blank=True, default=list, null=True, verbose_name='Current Extraction Processes')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('parent_collection', models.ManyToManyField(blank=True, to='data_map_backend.datacollection', verbose_name='Parent Collection')),
            ],
            options={
                'verbose_name': 'Data Collection',
                'verbose_name_plural': 'Data Collections',
            },
        ),
        migrations.CreateModel(
            name='CollectionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date added')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('is_positive', models.BooleanField(default=True, verbose_name='Is positive')),
                ('classes', models.JSONField(default=data_map_backend.models.class_field_default, verbose_name='Classes')),
                ('field_type', models.CharField(choices=[('TEXT', 'Text'), ('IDENTIFIER', 'Identifier'), ('FLOAT', 'Float'), ('INTEGER', 'Integer'), ('DATE', 'Date'), ('DATETIME', 'Datetime'), ('TIME', 'Time'), ('VECTOR', 'Vector'), ('CLASS_PROBABILITY', 'Class Probability'), ('FACE', 'Face'), ('URL', 'URL'), ('GEO_COORDINATES', 'Geo Coordinates'), ('TAG', 'Tag'), ('IMAGE', 'Image'), ('AUDIO', 'Audio'), ('VIDEO', 'Video'), ('FOREIGN_KEY', 'Reference to other element'), ('BOOL', 'Bool'), ('ATTRIBUTES', 'Attributes (dict)'), ('ARBITRARY_OBJECT', 'Non-indexed object'), ('CHUNK', 'Text Chunk with Metadata')], default='TEXT', help_text='Either IDENTIFIER, TEXT, IMAGE', max_length=50, verbose_name='Type')),
                ('dataset_id', models.IntegerField(blank=True, null=True, verbose_name='Dataset ID (in case this is an item reference aka IDENTIFIER)')),
                ('item_id', models.CharField(blank=True, max_length=200, null=True, verbose_name='Item ID (in case this is an item reference aka IDENTIFIER)')),
                ('value', models.TextField(blank=True, help_text='Any non-identifier value, e.g. plain text or image URL', null=True, verbose_name='Value')),
                ('weight', models.FloatField(default=1.0, help_text='Weight for this example (e.g. small if just a product page view, high if product was bought)', verbose_name='Weight')),
                ('column_data', models.JSONField(blank=True, default=dict, help_text='Extracted answers, notes, etc.', null=True, verbose_name='Column Data')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_map_backend.datacollection', verbose_name='Collection')),
            ],
            options={
                'verbose_name': 'Collection Item',
                'verbose_name_plural': 'Collection Item',
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Name')),
                ('search_settings', models.JSONField(blank=True, default=dict, null=True, verbose_name='Search Settings')),
                ('class_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Class')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('chat_history', models.JSONField(blank=True, default=list, null=True, verbose_name='Chat History')),
                ('is_processing', models.BooleanField(default=False, verbose_name='Is Processing')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data_map_backend.datacollection', verbose_name='Collection')),
            ],
            options={
                'verbose_name': 'Chat',
                'verbose_name_plural': 'Chats',
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('entity_name', models.CharField(blank=True, help_text="The type of the entity, e.g. 'Product' or 'Article'", max_length=40, null=True, verbose_name='Entity Name')),
                ('entity_name_plural', models.CharField(blank=True, max_length=40, null=True, verbose_name='Entity Name (Plural)')),
                ('short_description', models.CharField(blank=True, max_length=200, null=True, verbose_name='Short Description')),
                ('is_template', models.BooleanField(default=False, help_text='Whether this dataset is a schema for creating new datasets in the UI. Templates are not used for data storage.', verbose_name='Template')),
                ('created_in_ui', models.BooleanField(default=False, help_text="Whether this dataset was created using the 'Create new dataset' button in the frontend", verbose_name='Created in UI')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('is_public', models.BooleanField(default=False, help_text='Whether this dataset is available to everyone on the internet', verbose_name='Is public')),
                ('is_organization_wide', models.BooleanField(default=False, help_text='Whether this dataset is available to all organization members. If not, its only available to admins.', verbose_name='Is organization-wide')),
                ('source_plugin', models.CharField(choices=[('INTERNAL_OPENSEARCH_QDRANT', 'Internal DB (OpenSearch + Qdrant)'), ('REMOTE_DATASET', 'Remote Visual Data Map Dataset'), ('BRAVE_WEB_API', 'Brave Web Search API'), ('BING_WEB_API', 'Bing Web Search API'), ('SEMANTIC_SCHOLAR_API', 'Semantic Scholar API')], default='INTERNAL_OPENSEARCH_QDRANT', max_length=50, verbose_name='Source Plugin')),
                ('source_plugin_parameters', models.JSONField(blank=True, default=dict, null=True, verbose_name='Source Plugin Parameters')),
                ('database_name', models.CharField(blank=True, help_text="Name of the OpenSearch index and vector DB prefix, using 'dataset_&lt;id&gt;' if empty", max_length=100, null=True, verbose_name='Database Name')),
                ('defaults', models.JSONField(blank=True, default=dict, help_text='Default values for map parameters', null=True, verbose_name='Other Defaults')),
                ('result_list_rendering', models.JSONField(blank=True, default=data_map_backend.models.get_default_result_list_rendering, null=True, verbose_name='Result List Rendering')),
                ('hover_label_rendering', models.JSONField(blank=True, default=data_map_backend.models.get_default_hover_label_rendering, null=True, verbose_name='Hover Label Rendering')),
                ('detail_view_rendering', models.JSONField(blank=True, default=data_map_backend.models.get_default_detail_view_rendering, null=True, verbose_name='Detail View Rendering')),
                ('statistics', models.JSONField(blank=True, default=dict, help_text='Statistics shown for the search results', null=True, verbose_name='Statistics')),
                ('admins', models.ManyToManyField(blank=True, help_text='Users who can change the dataset and upload items to it', related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Admins')),
                ('origin_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='data_map_backend.dataset', verbose_name='Origin Template')),
                ('applicable_export_converters', models.ManyToManyField(blank=True, related_name='+', to='data_map_backend.exportconverter', verbose_name='Applicable Export Converters')),
                ('applicable_import_converters', models.ManyToManyField(blank=True, related_name='+', to='data_map_backend.importconverter', verbose_name='Applicable Import Converters')),
            ],
            options={
                'verbose_name': 'Dataset',
                'verbose_name_plural': 'Datasets',
            },
        ),
        migrations.CreateModel(
            name='Generator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('requires_context', models.BooleanField(default=False, verbose_name='Requires context')),
                ('module', models.CharField(max_length=200, verbose_name='Module')),
                ('is_preferred_for_search', models.BooleanField(default=False, help_text='Enabled this if this generator is optimized for short search queries', verbose_name='Is preferred for search')),
                ('default_parameters', models.JSONField(blank=True, null=True, verbose_name='Default Parameters')),
                ('parameter_description', models.TextField(blank=True, null=True, verbose_name='Parameter Description')),
                ('input_type', models.CharField(choices=[('TEXT', 'Text'), ('IDENTIFIER', 'Identifier'), ('FLOAT', 'Float'), ('INTEGER', 'Integer'), ('DATE', 'Date'), ('DATETIME', 'Datetime'), ('TIME', 'Time'), ('VECTOR', 'Vector'), ('CLASS_PROBABILITY', 'Class Probability'), ('FACE', 'Face'), ('URL', 'URL'), ('GEO_COORDINATES', 'Geo Coordinates'), ('TAG', 'Tag'), ('IMAGE', 'Image'), ('AUDIO', 'Audio'), ('VIDEO', 'Video'), ('FOREIGN_KEY', 'Reference to other element'), ('BOOL', 'Bool'), ('ATTRIBUTES', 'Attributes (dict)'), ('ARBITRARY_OBJECT', 'Non-indexed object'), ('CHUNK', 'Text Chunk with Metadata')], default='TEXT', max_length=50, verbose_name='Input Type')),
                ('input_is_array', models.BooleanField(default=False, verbose_name='Input is array / can be multiple')),
                ('input_description', models.TextField(blank=True, null=True, verbose_name='Input Description')),
                ('output_type', models.CharField(choices=[('TEXT', 'Text'), ('IDENTIFIER', 'Identifier'), ('FLOAT', 'Float'), ('INTEGER', 'Integer'), ('DATE', 'Date'), ('DATETIME', 'Datetime'), ('TIME', 'Time'), ('VECTOR', 'Vector'), ('CLASS_PROBABILITY', 'Class Probability'), ('FACE', 'Face'), ('URL', 'URL'), ('GEO_COORDINATES', 'Geo Coordinates'), ('TAG', 'Tag'), ('IMAGE', 'Image'), ('AUDIO', 'Audio'), ('VIDEO', 'Video'), ('FOREIGN_KEY', 'Reference to other element'), ('BOOL', 'Bool'), ('ATTRIBUTES', 'Attributes (dict)'), ('ARBITRARY_OBJECT', 'Non-indexed object'), ('CHUNK', 'Text Chunk with Metadata')], default='VECTOR', max_length=50, verbose_name='Output Type')),
                ('output_is_array', models.BooleanField(default=False, verbose_name='Output is array / can be multiple')),
                ('output_description', models.TextField(blank=True, null=True, verbose_name='Output Description')),
                ('text_similarity_threshold', models.FloatField(blank=True, help_text='The minimum score / similarity a text query must have compared to this field to be considered relevant / similar', null=True, verbose_name='Text Similarity Threshold')),
                ('image_similarity_threshold', models.FloatField(blank=True, help_text='The minimum score / similarity an image query must have compared to this field to be considered relevant / similar', null=True, verbose_name='Image Similarity Threshold')),
                ('embedding_space', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='data_map_backend.embeddingspace', verbose_name='Embedding Space')),
            ],
            options={
                'verbose_name': 'Generator',
                'verbose_name_plural': 'Generators',
            },
        ),
        migrations.CreateModel(
            name='HistoricalEmbeddingSpace',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(blank=True, editable=False, verbose_name='Changed at')),
                ('dimensions', models.IntegerField(help_text='Vector size of the embedding', verbose_name='Dimensions')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Embedding Space',
                'verbose_name_plural': 'historical Embedding Spaces',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalExportConverter',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('display_name', models.CharField(max_length=200, verbose_name='Name')),
                ('identifier', models.CharField(db_index=True, max_length=200, verbose_name='Identifier')),
                ('universally_applicable', models.BooleanField(default=False, help_text='Whether this converter is applicable to all datasets', verbose_name='Universally Applicable')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(blank=True, editable=False, verbose_name='Changed at')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('module', models.CharField(max_length=200, verbose_name='Code Module Name')),
                ('parameters', models.JSONField(blank=True, default=dict, null=True, verbose_name='Parameters')),
                ('preview_as_text', models.BooleanField(default=False, help_text='If the result should be shown in the UI as text in addition to a download link', verbose_name='Preview as text')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Export Converter',
                'verbose_name_plural': 'historical Export Converters',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalGenerator',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(blank=True, editable=False, verbose_name='Changed at')),
                ('requires_context', models.BooleanField(default=False, verbose_name='Requires context')),
                ('module', models.CharField(max_length=200, verbose_name='Module')),
                ('is_preferred_for_search', models.BooleanField(default=False, help_text='Enabled this if this generator is optimized for short search queries', verbose_name='Is preferred for search')),
                ('default_parameters', models.JSONField(blank=True, null=True, verbose_name='Default Parameters')),
                ('parameter_description', models.TextField(blank=True, null=True, verbose_name='Parameter Description')),
                ('input_type', models.CharField(choices=[('TEXT', 'Text'), ('IDENTIFIER', 'Identifier'), ('FLOAT', 'Float'), ('INTEGER', 'Integer'), ('DATE', 'Date'), ('DATETIME', 'Datetime'), ('TIME', 'Time'), ('VECTOR', 'Vector'), ('CLASS_PROBABILITY', 'Class Probability'), ('FACE', 'Face'), ('URL', 'URL'), ('GEO_COORDINATES', 'Geo Coordinates'), ('TAG', 'Tag'), ('IMAGE', 'Image'), ('AUDIO', 'Audio'), ('VIDEO', 'Video'), ('FOREIGN_KEY', 'Reference to other element'), ('BOOL', 'Bool'), ('ATTRIBUTES', 'Attributes (dict)'), ('ARBITRARY_OBJECT', 'Non-indexed object'), ('CHUNK', 'Text Chunk with Metadata')], default='TEXT', max_length=50, verbose_name='Input Type')),
                ('input_is_array', models.BooleanField(default=False, verbose_name='Input is array / can be multiple')),
                ('input_description', models.TextField(blank=True, null=True, verbose_name='Input Description')),
                ('output_type', models.CharField(choices=[('TEXT', 'Text'), ('IDENTIFIER', 'Identifier'), ('FLOAT', 'Float'), ('INTEGER', 'Integer'), ('DATE', 'Date'), ('DATETIME', 'Datetime'), ('TIME', 'Time'), ('VECTOR', 'Vector'), ('CLASS_PROBABILITY', 'Class Probability'), ('FACE', 'Face'), ('URL', 'URL'), ('GEO_COORDINATES', 'Geo Coordinates'), ('TAG', 'Tag'), ('IMAGE', 'Image'), ('AUDIO', 'Audio'), ('VIDEO', 'Video'), ('FOREIGN_KEY', 'Reference to other element'), ('BOOL', 'Bool'), ('ATTRIBUTES', 'Attributes (dict)'), ('ARBITRARY_OBJECT', 'Non-indexed object'), ('CHUNK', 'Text Chunk with Metadata')], default='VECTOR', max_length=50, verbose_name='Output Type')),
                ('output_is_array', models.BooleanField(default=False, verbose_name='Output is array / can be multiple')),
                ('output_description', models.TextField(blank=True, null=True, verbose_name='Output Description')),
                ('text_similarity_threshold', models.FloatField(blank=True, help_text='The minimum score / similarity a text query must have compared to this field to be considered relevant / similar', null=True, verbose_name='Text Similarity Threshold')),
                ('image_similarity_threshold', models.FloatField(blank=True, help_text='The minimum score / similarity an image query must have compared to this field to be considered relevant / similar', null=True, verbose_name='Image Similarity Threshold')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('embedding_space', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.embeddingspace', verbose_name='Embedding Space')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Generator',
                'verbose_name_plural': 'historical Generators',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalImportConverter',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('display_name', models.CharField(max_length=200, verbose_name='Name')),
                ('identifier', models.CharField(max_length=200, verbose_name='Identifier')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(blank=True, editable=False, verbose_name='Changed at')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('module', models.CharField(max_length=200, verbose_name='Code Module Name')),
                ('parameters', models.JSONField(blank=True, default=dict, null=True, verbose_name='Parameters')),
                ('example_file_url', models.CharField(blank=True, max_length=200, null=True, verbose_name='Example File URL')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Import Converter',
                'verbose_name_plural': 'historical Import Converters',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalObjectField',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('identifier', models.CharField(max_length=200, verbose_name='Identifier')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(blank=True, editable=False, verbose_name='Changed at')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='Description')),
                ('field_type', models.CharField(choices=[('TEXT', 'Text'), ('IDENTIFIER', 'Identifier'), ('FLOAT', 'Float'), ('INTEGER', 'Integer'), ('DATE', 'Date'), ('DATETIME', 'Datetime'), ('TIME', 'Time'), ('VECTOR', 'Vector'), ('CLASS_PROBABILITY', 'Class Probability'), ('FACE', 'Face'), ('URL', 'URL'), ('GEO_COORDINATES', 'Geo Coordinates'), ('TAG', 'Tag'), ('IMAGE', 'Image'), ('AUDIO', 'Audio'), ('VIDEO', 'Video'), ('FOREIGN_KEY', 'Reference to other element'), ('BOOL', 'Bool'), ('ATTRIBUTES', 'Attributes (dict)'), ('ARBITRARY_OBJECT', 'Non-indexed object'), ('CHUNK', 'Text Chunk with Metadata')], default='TEXT', max_length=50, verbose_name='Type')),
                ('is_array', models.BooleanField(default=False, verbose_name='Is array')),
                ('language_analysis', models.CharField(blank=True, choices=[('english', 'English'), ('german', 'German'), ('french', 'French'), ('spanish', 'Spanish'), ('czech', 'Czech'), ('russian', 'Russian'), ('hindi', 'Hindi')], help_text="Only applicable for 'Text' fields", max_length=50, null=True, verbose_name='Language Processing')),
                ('is_available_for_search', models.BooleanField(default=False, verbose_name='Available for fulltext or vector search')),
                ('text_similarity_threshold', models.FloatField(blank=True, help_text='The minimum score / similarity a text query must have compared to this field to be considered relevant / similar (overriding the generators value)', null=True, verbose_name='Text Similarity Threshold')),
                ('image_similarity_threshold', models.FloatField(blank=True, help_text='The minimum score / similarity an image query must have compared to this field to be considered relevant / similar (overriding the generators value)', null=True, verbose_name='Image Similarity Threshold')),
                ('is_available_for_filtering', models.BooleanField(default=False, verbose_name='Available for filtering')),
                ('index_parameters', models.JSONField(blank=True, null=True, verbose_name='Index Parameters')),
                ('generator_parameters', models.JSONField(blank=True, null=True, verbose_name='Generator Parameters')),
                ('generating_condition', models.TextField(blank=True, null=True, verbose_name='Generating Condition')),
                ('should_be_generated', models.BooleanField(default=False, help_text='Should be generated for new elements and when source fields are updated, not automatically generated for exisitng elements', verbose_name='Generate on insert / change')),
                ('_order', models.IntegerField(editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('dataset', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.dataset', verbose_name='Dataset')),
                ('embedding_space', models.ForeignKey(blank=True, db_constraint=False, help_text='If not set, embedding space of generator will be used', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.embeddingspace', verbose_name='Embedding Space')),
                ('generator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.generator', verbose_name='Generator')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Object Field',
                'verbose_name_plural': 'historical Object Fields',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOrganization',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(blank=True, editable=False, verbose_name='Changed at')),
                ('is_public', models.BooleanField(default=False, help_text='Whether this organization is visible to everyone on the internet', verbose_name='Is public')),
                ('workspace_tool_title', models.CharField(blank=True, help_text='Title of the workspace tool in the frontend', max_length=40, null=True, verbose_name='Workspace Tool Title')),
                ('workspace_tool_logo_url', models.CharField(blank=True, help_text='URL of the workspace tool logo in the frontend', max_length=200, null=True, verbose_name='Workspace Tool Logo URL')),
                ('workspace_tool_intro_text', models.TextField(blank=True, help_text='Intro text of the workspace tool, HTML is allowed', null=True, verbose_name='Workspace Tool Intro Text')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Organization',
                'verbose_name_plural': 'historical Organizations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='ObjectField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=200, verbose_name='Identifier')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='Description')),
                ('field_type', models.CharField(choices=[('TEXT', 'Text'), ('IDENTIFIER', 'Identifier'), ('FLOAT', 'Float'), ('INTEGER', 'Integer'), ('DATE', 'Date'), ('DATETIME', 'Datetime'), ('TIME', 'Time'), ('VECTOR', 'Vector'), ('CLASS_PROBABILITY', 'Class Probability'), ('FACE', 'Face'), ('URL', 'URL'), ('GEO_COORDINATES', 'Geo Coordinates'), ('TAG', 'Tag'), ('IMAGE', 'Image'), ('AUDIO', 'Audio'), ('VIDEO', 'Video'), ('FOREIGN_KEY', 'Reference to other element'), ('BOOL', 'Bool'), ('ATTRIBUTES', 'Attributes (dict)'), ('ARBITRARY_OBJECT', 'Non-indexed object'), ('CHUNK', 'Text Chunk with Metadata')], default='TEXT', max_length=50, verbose_name='Type')),
                ('is_array', models.BooleanField(default=False, verbose_name='Is array')),
                ('language_analysis', models.CharField(blank=True, choices=[('english', 'English'), ('german', 'German'), ('french', 'French'), ('spanish', 'Spanish'), ('czech', 'Czech'), ('russian', 'Russian'), ('hindi', 'Hindi')], help_text="Only applicable for 'Text' fields", max_length=50, null=True, verbose_name='Language Processing')),
                ('is_available_for_search', models.BooleanField(default=False, verbose_name='Available for fulltext or vector search')),
                ('text_similarity_threshold', models.FloatField(blank=True, help_text='The minimum score / similarity a text query must have compared to this field to be considered relevant / similar (overriding the generators value)', null=True, verbose_name='Text Similarity Threshold')),
                ('image_similarity_threshold', models.FloatField(blank=True, help_text='The minimum score / similarity an image query must have compared to this field to be considered relevant / similar (overriding the generators value)', null=True, verbose_name='Image Similarity Threshold')),
                ('is_available_for_filtering', models.BooleanField(default=False, verbose_name='Available for filtering')),
                ('index_parameters', models.JSONField(blank=True, null=True, verbose_name='Index Parameters')),
                ('generator_parameters', models.JSONField(blank=True, null=True, verbose_name='Generator Parameters')),
                ('generating_condition', models.TextField(blank=True, null=True, verbose_name='Generating Condition')),
                ('should_be_generated', models.BooleanField(default=False, help_text='Should be generated for new elements and when source fields are updated, not automatically generated for exisitng elements', verbose_name='Generate on insert / change')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='object_fields', to='data_map_backend.dataset', verbose_name='Dataset')),
                ('embedding_space', models.ForeignKey(blank=True, help_text='If not set, embedding space of generator will be used', null=True, on_delete=django.db.models.deletion.PROTECT, to='data_map_backend.embeddingspace', verbose_name='Embedding Space')),
                ('generator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='data_map_backend.generator', verbose_name='Generator')),
                ('source_fields', models.ManyToManyField(blank=True, to='data_map_backend.objectfield', verbose_name='Source Fields')),
            ],
            options={
                'verbose_name': 'Object Field',
                'verbose_name_plural': 'Object Fields',
                'order_with_respect_to': 'dataset',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDatasetSpecificSettingsOfCollection',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(blank=True, editable=False, verbose_name='Changed at')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('collection', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.datacollection', verbose_name='Collection')),
                ('dataset', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.dataset', verbose_name='Dataset')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('negative_annotation_field', models.ForeignKey(blank=True, db_constraint=False, help_text='binary: bool field, exclusive: single tag, non-exclusive: tag array field', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.objectfield', verbose_name='Negative Annotation Field')),
                ('positive_annotation_field', models.ForeignKey(blank=True, db_constraint=False, help_text='binary: bool field, exclusive: single tag, non-exclusive: tag array field', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.objectfield', verbose_name='Positive Annotation Field')),
            ],
            options={
                'verbose_name': 'historical Dataset Specific Settings',
                'verbose_name_plural': 'historical Dataset Specific Settings',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='dataset',
            name='default_search_fields',
            field=models.ManyToManyField(blank=True, help_text='For combined search', related_name='+', to='data_map_backend.objectfield', verbose_name='Default Search Fields'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='descriptive_text_fields',
            field=models.ManyToManyField(blank=True, help_text='For Word2Vec and Cluster Titles', related_name='+', to='data_map_backend.objectfield', verbose_name='Descriptive Text Fields'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='primary_key',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='data_map_backend.objectfield', verbose_name='Primary Key'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='thumbnail_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='data_map_backend.objectfield', verbose_name='Thumbnail Image'),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('is_public', models.BooleanField(default=False, help_text='Whether this organization is visible to everyone on the internet', verbose_name='Is public')),
                ('workspace_tool_title', models.CharField(blank=True, help_text='Title of the workspace tool in the frontend', max_length=40, null=True, verbose_name='Workspace Tool Title')),
                ('workspace_tool_logo_url', models.CharField(blank=True, help_text='URL of the workspace tool logo in the frontend', max_length=200, null=True, verbose_name='Workspace Tool Logo URL')),
                ('workspace_tool_intro_text', models.TextField(blank=True, help_text='Intro text of the workspace tool, HTML is allowed', null=True, verbose_name='Workspace Tool Intro Text')),
                ('default_dataset_selection', models.ManyToManyField(blank=True, related_name='+', to='data_map_backend.dataset', verbose_name='Default Dataset Selection')),
                ('members', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='Members')),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDataset',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('entity_name', models.CharField(blank=True, help_text="The type of the entity, e.g. 'Product' or 'Article'", max_length=40, null=True, verbose_name='Entity Name')),
                ('entity_name_plural', models.CharField(blank=True, max_length=40, null=True, verbose_name='Entity Name (Plural)')),
                ('short_description', models.CharField(blank=True, max_length=200, null=True, verbose_name='Short Description')),
                ('is_template', models.BooleanField(default=False, help_text='Whether this dataset is a schema for creating new datasets in the UI. Templates are not used for data storage.', verbose_name='Template')),
                ('created_in_ui', models.BooleanField(default=False, help_text="Whether this dataset was created using the 'Create new dataset' button in the frontend", verbose_name='Created in UI')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(blank=True, editable=False, verbose_name='Changed at')),
                ('is_public', models.BooleanField(default=False, help_text='Whether this dataset is available to everyone on the internet', verbose_name='Is public')),
                ('is_organization_wide', models.BooleanField(default=False, help_text='Whether this dataset is available to all organization members. If not, its only available to admins.', verbose_name='Is organization-wide')),
                ('source_plugin', models.CharField(choices=[('INTERNAL_OPENSEARCH_QDRANT', 'Internal DB (OpenSearch + Qdrant)'), ('REMOTE_DATASET', 'Remote Visual Data Map Dataset'), ('BRAVE_WEB_API', 'Brave Web Search API'), ('BING_WEB_API', 'Bing Web Search API'), ('SEMANTIC_SCHOLAR_API', 'Semantic Scholar API')], default='INTERNAL_OPENSEARCH_QDRANT', max_length=50, verbose_name='Source Plugin')),
                ('source_plugin_parameters', models.JSONField(blank=True, default=dict, null=True, verbose_name='Source Plugin Parameters')),
                ('database_name', models.CharField(blank=True, help_text="Name of the OpenSearch index and vector DB prefix, using 'dataset_&lt;id&gt;' if empty", max_length=100, null=True, verbose_name='Database Name')),
                ('defaults', models.JSONField(blank=True, default=dict, help_text='Default values for map parameters', null=True, verbose_name='Other Defaults')),
                ('result_list_rendering', models.JSONField(blank=True, default=data_map_backend.models.get_default_result_list_rendering, null=True, verbose_name='Result List Rendering')),
                ('hover_label_rendering', models.JSONField(blank=True, default=data_map_backend.models.get_default_hover_label_rendering, null=True, verbose_name='Hover Label Rendering')),
                ('detail_view_rendering', models.JSONField(blank=True, default=data_map_backend.models.get_default_detail_view_rendering, null=True, verbose_name='Detail View Rendering')),
                ('statistics', models.JSONField(blank=True, default=dict, help_text='Statistics shown for the search results', null=True, verbose_name='Statistics')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('origin_template', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.dataset', verbose_name='Origin Template')),
                ('primary_key', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.objectfield', verbose_name='Primary Key')),
                ('thumbnail_image', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.objectfield', verbose_name='Thumbnail Image')),
                ('organization', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.organization', verbose_name='Organization')),
            ],
            options={
                'verbose_name': 'historical Dataset',
                'verbose_name_plural': 'historical Datasets',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataCollection',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(blank=True, editable=False, verbose_name='Changed at')),
                ('is_public', models.BooleanField(default=False, verbose_name='Is public')),
                ('is_binary', models.BooleanField(default=False, verbose_name='Is binary')),
                ('allow_multi_class', models.BooleanField(default=False, verbose_name='Allow multi class')),
                ('class_names', models.JSONField(blank=True, default=data_map_backend.models.class_field_default, help_text='Minimal list of classes shown in the UI, even if no items are present. More classes are deducted from items.', null=True, verbose_name='Class Names')),
                ('default_threshold', models.FloatField(default=0.5, verbose_name='Default Threshold')),
                ('per_class_thresholds', models.JSONField(blank=True, help_text='block classes e.g. from parents, using weight of -1', null=True, verbose_name='Per Class Thresholds')),
                ('items_last_changed', models.JSONField(blank=True, default=dict, help_text='For each class, the last time an item was added or removed', null=True, verbose_name='Items Last Changed')),
                ('extraction_questions', models.JSONField(blank=True, default=list, null=True, verbose_name='Extraction Questions')),
                ('table_columns', models.JSONField(blank=True, default=list, null=True, verbose_name='Table Columns')),
                ('current_extraction_processes', models.JSONField(blank=True, default=list, null=True, verbose_name='Current Extraction Processes')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('related_organization', models.ForeignKey(blank=True, db_constraint=False, help_text='Collections can be used across organizations, but they usually belong to one', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_map_backend.organization', verbose_name='Related Organization')),
            ],
            options={
                'verbose_name': 'historical Data Collection',
                'verbose_name_plural': 'historical Data Collections',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='dataset',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='datasets', to='data_map_backend.organization', verbose_name='Organization'),
        ),
        migrations.AddField(
            model_name='datacollection',
            name='related_organization',
            field=models.ForeignKey(blank=True, help_text='Collections can be used across organizations, but they usually belong to one', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='data_map_backend.organization', verbose_name='Related Organization'),
        ),
        migrations.CreateModel(
            name='SearchHistoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('display_name', models.CharField(blank=True, help_text='Name to be displayed in the frontend, including HTML markup', max_length=300, null=True, verbose_name='Display Name')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('parameters', models.JSONField(blank=True, null=True, verbose_name='Parameters')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='data_map_backend.organization', verbose_name='Organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Search History Item',
                'verbose_name_plural': 'Search History Items',
            },
        ),
        migrations.CreateModel(
            name='ServiceUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('service', models.CharField(max_length=200, verbose_name='Service')),
                ('limit_per_period', models.FloatField(default=50.0, verbose_name='Limit per Period')),
                ('period_type', models.CharField(choices=[('day', 'Day'), ('week', 'Week'), ('month', 'Month'), ('year', 'Year')], default='month', max_length=50, verbose_name='Period Type')),
                ('warning_ratio', models.FloatField(default=0.8, verbose_name='Warning Ratio')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Service Usage',
                'verbose_name_plural': 'Service Usages',
                'unique_together': {('user', 'service')},
            },
        ),
        migrations.CreateModel(
            name='StoredMap',
            fields=[
                ('id', models.CharField(editable=False, max_length=50, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('display_name', models.CharField(blank=True, help_text='Name to be displayed in the frontend, including HTML markup', max_length=300, null=True, verbose_name='Display Name')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('map_data', models.BinaryField(blank=True, null=True, verbose_name='Data')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='data_map_backend.organization', verbose_name='Organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Stored Map',
                'verbose_name_plural': 'Stored Maps',
            },
        ),
        migrations.CreateModel(
            name='CollectionColumn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('identifier', models.CharField(default=data_map_backend.models.get_random_string, max_length=200, verbose_name='Identifier')),
                ('field_type', models.CharField(choices=[('TEXT', 'Text'), ('IDENTIFIER', 'Identifier'), ('FLOAT', 'Float'), ('INTEGER', 'Integer'), ('DATE', 'Date'), ('DATETIME', 'Datetime'), ('TIME', 'Time'), ('VECTOR', 'Vector'), ('CLASS_PROBABILITY', 'Class Probability'), ('FACE', 'Face'), ('URL', 'URL'), ('GEO_COORDINATES', 'Geo Coordinates'), ('TAG', 'Tag'), ('IMAGE', 'Image'), ('AUDIO', 'Audio'), ('VIDEO', 'Video'), ('FOREIGN_KEY', 'Reference to other element'), ('BOOL', 'Bool'), ('ATTRIBUTES', 'Attributes (dict)'), ('ARBITRARY_OBJECT', 'Non-indexed object'), ('CHUNK', 'Text Chunk with Metadata')], default='TEXT', max_length=50, verbose_name='Type')),
                ('expression', models.TextField(blank=True, help_text='Question / Prompt / Math / Code expression to generate this column', null=True, verbose_name='Expression')),
                ('source_fields', models.JSONField(blank=True, default=list, help_text='List of source fields to be used for this column', null=True, verbose_name='Source Fields')),
                ('module', models.CharField(blank=True, max_length=200, null=True, verbose_name='Code Module Name')),
                ('parameters', models.JSONField(blank=True, default=dict, null=True, verbose_name='Parameters')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='columns', to='data_map_backend.datacollection', verbose_name='Collection')),
            ],
            options={
                'verbose_name': 'Collection Column',
                'verbose_name_plural': 'Collection Columns',
                'order_with_respect_to': 'collection',
                'unique_together': {('collection', 'identifier')},
            },
        ),
        migrations.CreateModel(
            name='DatasetSpecificSettingsOfCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dataset_specific_settings', to='data_map_backend.datacollection', verbose_name='Collection')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='data_map_backend.dataset', verbose_name='Dataset')),
                ('negative_annotation_field', models.ForeignKey(blank=True, help_text='binary: bool field, exclusive: single tag, non-exclusive: tag array field', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='data_map_backend.objectfield', verbose_name='Negative Annotation Field')),
                ('positive_annotation_field', models.ForeignKey(blank=True, help_text='binary: bool field, exclusive: single tag, non-exclusive: tag array field', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='data_map_backend.objectfield', verbose_name='Positive Annotation Field')),
                ('relevant_object_fields', models.ManyToManyField(blank=True, help_text="The 'source' fields (text or image) for items from this dataset, using default search fields (or their sources for vectors) if empty", related_name='+', to='data_map_backend.objectfield', verbose_name='Relevant Object Fields')),
            ],
            options={
                'verbose_name': 'Dataset Specific Settings',
                'verbose_name_plural': 'Dataset Specific Settings',
                'unique_together': {('collection', 'dataset')},
            },
        ),
        migrations.CreateModel(
            name='ServiceUsagePeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('period', models.CharField(max_length=50, verbose_name='Period')),
                ('usage', models.FloatField(default=0, verbose_name='Usage')),
                ('service_usage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_periods', to='data_map_backend.serviceusage', verbose_name='Service Usage')),
            ],
            options={
                'verbose_name': 'Service Usage Period',
                'verbose_name_plural': 'Service Usage Periods',
                'unique_together': {('service_usage', 'period')},
            },
        ),
        migrations.CreateModel(
            name='TrainedClassifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Created at')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Changed at')),
                ('last_retrained_at', models.DateTimeField(blank=True, null=True, verbose_name='Last Retrained at')),
                ('class_name', models.CharField(max_length=200, verbose_name='Class')),
                ('decision_vector', models.JSONField(blank=True, null=True, verbose_name='decision_vector')),
                ('highest_score', models.FloatField(blank=True, null=True, verbose_name='Highest Score')),
                ('threshold', models.FloatField(default=0.5, verbose_name='Threshold')),
                ('metrics', models.JSONField(blank=True, default=dict, null=True, verbose_name='Metrics')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trained_classifiers', to='data_map_backend.datacollection', verbose_name='Collection')),
                ('embedding_space', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='data_map_backend.embeddingspace', verbose_name='Embedding Space')),
            ],
            options={
                'verbose_name': 'Trained Classifier',
                'verbose_name_plural': 'Trained Classifiers',
                'unique_together': {('collection', 'class_name', 'embedding_space')},
            },
        ),
    ]
