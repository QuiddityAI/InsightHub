Settings:

points, blending on, normal blend, z test not equal


----------------------------------------------------------

attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 uv1;
attribute vec4 tangent;

uniform mat4 _mv; // model-view matrix
uniform mat4 _mvProj; // model-view-projection matrix
uniform mat3 _norm; // normal matrix
uniform float _time; // time in seconds

varying float primitiveId;

varying vec2 uv;
varying vec3 n;

void main(void) {
	primitiveId = vertex.x;
	gl_PointSize = 30.0;
	
	// compute position
	gl_Position = _mvProj * vec4(vertex, 1.0);

	uv = uv1;
	// compute light info
	n = normalize(_norm * normal);
}


----------------------------------------------------------

precision highp float;

varying vec3 n;
varying vec2 uv;
varying float primitiveId;

uniform sampler2D tex;


//#pragma include "noise2D.glsl // for snoise(vec2 v)
//#pragma include "noise3D.glsl" //  for snoise(vec3 v)
//#pragma include "noise4D.glsl" //  for snoise(vec4 v)
//#pragma include "cellular2D.glsl" //  for cellular(vec2 P)
//#pragma include "cellular2x2.glsl" //  for cellular2x2(vec2 P)
//#pragma include "cellular2x2x2.glsl" //  for cellular2x2x2(vec3 P)
//#pragma include "cellular3D.glsl" //  cellular(vec3 P)

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

void main(void)
{
    
	vec2 posFromUpperLeft = gl_PointCoord.xy;  // 0 - 1
	
	vec2 posFromCenter = posFromUpperLeft - 0.5;
	float distFromCenter = length(posFromCenter);  // 0 - 0.5
	
	vec2 viewPortSize = vec2(300, 300);
	vec2 relativeScreenPos = gl_FragCoord.xy / viewPortSize;  // 0-1, from bottom left (?)
	relativeScreenPos.x = 1.0 - relativeScreenPos.x;  // 0-1, from top left (?)
	//gl_FragColor = vec4(relativeScreenPos, 1.0, 1.0);
	
	vec2 lightPos = vec2(0.5, 0.7);
	//vec2 specular = vec2(1.0 - relativeScreenPos.x / 2.0, 1.0 - relativeScreenPos.y / 2.0);
	vec2 specular = relativeScreenPos - lightPos;
    
    float circleArea = 1.0 - step(0.5, distFromCenter);  // smoothstep(0.5, 0.4, length(uv - 0.5));
    float noise = 0.2 * rand(floor(posFromCenter * 40.0)/40.0);
    vec3 specColor = 1.0 - vec3(length(posFromCenter - specular));
    float edgeHighlight = 0.2 * smoothstep(0.25, 0.5, distFromCenter);
    
    //gl_FragColor.rgb = 0.5 + 0.2 * sin(posFromUpperLeft.yxx) + vec3(0.1, 0.0, 0.3);
    gl_FragColor.rgb = specColor + noise + edgeHighlight;
    gl_FragColor.a = step(0.95, rand(vec2(primitiveId))) * circleArea;
    
	
}

