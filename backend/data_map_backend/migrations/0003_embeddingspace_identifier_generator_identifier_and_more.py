# Generated by Django 5.0.6 on 2024-05-29 16:14

from django.db import migrations, models


def populate_new_fields(apps, schema_editor):
    EmbeddingSpace = apps.get_model("data_map_backend", "EmbeddingSpace")
    for embeddingspace in EmbeddingSpace.objects.all():
        embeddingspace.identifier = embeddingspace.name.lower().replace(" ", "_")
        embeddingspace.save()

    Generator = apps.get_model("data_map_backend", "Generator")
    for generator in Generator.objects.all():
        generator.identifier = generator.name.lower().replace(" ", "_")
        generator.save()

    ObjectField = apps.get_model("data_map_backend", "ObjectField")
    for objectfield in ObjectField.objects.all():
        objectfield.name = objectfield.description
        objectfield.source_fields_plain = list(objectfield.source_fields.all().values_list("identifier", flat=True))
        objectfield.save()


class Migration(migrations.Migration):

    dependencies = [
        ("data_map_backend", "0002_writingtask"),
    ]

    operations = [
        migrations.AddField(
            model_name="embeddingspace",
            name="identifier",
            field=models.CharField(default="non", max_length=200, verbose_name="Identifier"),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="generator",
            name="identifier",
            field=models.CharField(default="non", max_length=200, verbose_name="Identifier"),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="historicalembeddingspace",
            name="identifier",
            field=models.CharField(default="non", max_length=200, verbose_name="Identifier"),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="historicalgenerator",
            name="identifier",
            field=models.CharField(default="non", max_length=200, verbose_name="Identifier"),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="historicalobjectfield",
            name="name",
            field=models.CharField(blank=True, null=True, max_length=200, verbose_name="Display Name"),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="historicalobjectfield",
            name="source_fields_plain",
            field=models.JSONField(
                blank=True,
                default=list,
                help_text="List of source field identifiers",
                null=True,
                verbose_name="Source Fields Plain",
            ),
        ),
        migrations.AddField(
            model_name="objectfield",
            name="name",
            field=models.CharField(blank=True, null=True, max_length=200, verbose_name="Display Name"),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="objectfield",
            name="source_fields_plain",
            field=models.JSONField(
                blank=True,
                default=list,
                help_text="List of source field identifiers",
                null=True,
                verbose_name="Source Fields Plain",
            ),
        ),
        migrations.AlterField(
            model_name="embeddingspace",
            name="name",
            field=models.CharField(max_length=200, verbose_name="Display Name"),
        ),
        migrations.AlterField(
            model_name="generator",
            name="name",
            field=models.CharField(max_length=200, verbose_name="Display Name"),
        ),
        migrations.AlterField(
            model_name="historicalembeddingspace",
            name="name",
            field=models.CharField(max_length=200, verbose_name="Display Name"),
        ),
        migrations.AlterField(
            model_name="historicalgenerator",
            name="name",
            field=models.CharField(max_length=200, verbose_name="Display Name"),
        ),
        migrations.RunPython(populate_new_fields, reverse_code=migrations.RunPython.noop),
    ]
