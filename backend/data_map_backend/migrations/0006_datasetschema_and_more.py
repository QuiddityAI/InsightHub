# Generated by Django 5.0.6 on 2024-05-30 11:11

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

import data_map_backend.models


class Migration(migrations.Migration):

    dependencies = [
        ("data_map_backend", "0005_fix_foreignkey_column_types"),
    ]

    operations = [
        migrations.CreateModel(
            name="DatasetSchema",
            fields=[
                (
                    "identifier",
                    models.CharField(
                        help_text="Do not change this after being used elsewhere",
                        max_length=200,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="Identifier",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Display Name")),
                (
                    "entity_name",
                    models.CharField(
                        blank=True,
                        help_text="The type of the entity, e.g. 'Product' or 'Article'",
                        max_length=40,
                        null=True,
                        verbose_name="Entity Name",
                    ),
                ),
                (
                    "entity_name_plural",
                    models.CharField(blank=True, max_length=40, null=True, verbose_name="Entity Name (Plural)"),
                ),
                (
                    "short_description",
                    models.CharField(blank=True, max_length=200, null=True, verbose_name="Short Description"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, default=django.utils.timezone.now, null=True, verbose_name="Created at"
                    ),
                ),
                ("changed_at", models.DateTimeField(auto_now=True, verbose_name="Changed at")),
                (
                    "primary_key",
                    models.CharField(
                        blank=True,
                        help_text="If set, this field is used to generate the internal '_id' field consistently, otherwise its a random UUID",
                        max_length=200,
                        null=True,
                        verbose_name="Primary Key",
                    ),
                ),
                (
                    "thumbnail_image",
                    models.CharField(
                        blank=True,
                        help_text="Should point to a field with an image URL",
                        max_length=200,
                        null=True,
                        verbose_name="Thumbnail Image",
                    ),
                ),
                (
                    "descriptive_text_fields",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="For Word2Vec, Cluster Titles and more",
                        null=True,
                        verbose_name="Descriptive Text Fields",
                    ),
                ),
                (
                    "default_search_fields",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Text or embedding fields (for hybrid search)",
                        null=True,
                        verbose_name="Default Search Fields",
                    ),
                ),
                (
                    "advanced_options",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Advanced options for the dataset, like defaults for map creation etc.",
                        null=True,
                        verbose_name="Advanced Options",
                    ),
                ),
                (
                    "result_list_rendering",
                    models.JSONField(
                        blank=True,
                        default=data_map_backend.models.get_default_result_list_rendering,
                        null=True,
                        verbose_name="Result List Rendering",
                    ),
                ),
                (
                    "hover_label_rendering",
                    models.JSONField(
                        blank=True,
                        default=data_map_backend.models.get_default_hover_label_rendering,
                        null=True,
                        verbose_name="Hover Label Rendering",
                    ),
                ),
                (
                    "detail_view_rendering",
                    models.JSONField(
                        blank=True,
                        default=data_map_backend.models.get_default_detail_view_rendering,
                        null=True,
                        verbose_name="Detail View Rendering",
                    ),
                ),
                (
                    "statistics",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Statistics shown for the search results",
                        null=True,
                        verbose_name="Statistics",
                    ),
                ),
                (
                    "applicable_export_converters",
                    models.ManyToManyField(
                        blank=True,
                        related_name="+",
                        to="data_map_backend.exportconverter",
                        verbose_name="Applicable Export Converters",
                    ),
                ),
                (
                    "applicable_import_converters",
                    models.ManyToManyField(
                        blank=True,
                        related_name="+",
                        to="data_map_backend.importconverter",
                        verbose_name="Applicable Import Converters",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dataset Schema",
                "verbose_name_plural": "Dataset Schemas",
            },
        ),
        migrations.AddField(
            model_name="organization",
            name="schemas_for_user_created_datasets",
            field=models.ManyToManyField(
                blank=True,
                related_name="+",
                to="data_map_backend.datasetschema",
                verbose_name="Schemas for User-Created Datasets",
            ),
        ),
        migrations.CreateModel(
            name="DatasetField",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("identifier", models.CharField(max_length=200, verbose_name="Identifier")),
                ("name", models.CharField(blank=True, max_length=200, null=True, verbose_name="Display Name")),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, default=django.utils.timezone.now, null=True, verbose_name="Created at"
                    ),
                ),
                ("changed_at", models.DateTimeField(auto_now=True, verbose_name="Changed at")),
                ("description", models.CharField(blank=True, max_length=200, null=True, verbose_name="Description")),
                (
                    "field_type",
                    models.CharField(
                        choices=[
                            ("TEXT", "Text"),
                            ("IDENTIFIER", "Identifier"),
                            ("FLOAT", "Float"),
                            ("INTEGER", "Integer"),
                            ("DATE", "Date"),
                            ("DATETIME", "Datetime"),
                            ("TIME", "Time"),
                            ("VECTOR", "Vector"),
                            ("CLASS_PROBABILITY", "Class Probability"),
                            ("FACE", "Face"),
                            ("URL", "URL"),
                            ("GEO_COORDINATES", "Geo Coordinates"),
                            ("TAG", "Tag"),
                            ("IMAGE", "Image"),
                            ("AUDIO", "Audio"),
                            ("VIDEO", "Video"),
                            ("FOREIGN_KEY", "Reference to other element"),
                            ("BOOL", "Bool"),
                            ("ATTRIBUTES", "Attributes (dict)"),
                            ("ARBITRARY_OBJECT", "Non-indexed object"),
                            ("CHUNK", "Text Chunk with Metadata"),
                        ],
                        default="TEXT",
                        max_length=50,
                        verbose_name="Type",
                    ),
                ),
                ("is_array", models.BooleanField(default=False, verbose_name="Is array")),
                (
                    "language_analysis",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("english", "English"),
                            ("german", "German"),
                            ("french", "French"),
                            ("spanish", "Spanish"),
                            ("czech", "Czech"),
                            ("russian", "Russian"),
                            ("hindi", "Hindi"),
                        ],
                        help_text="Only applicable for 'Text' fields",
                        max_length=50,
                        null=True,
                        verbose_name="Language Processing",
                    ),
                ),
                (
                    "is_available_for_search",
                    models.BooleanField(default=False, verbose_name="Available for fulltext or vector search"),
                ),
                (
                    "text_similarity_threshold",
                    models.FloatField(
                        blank=True,
                        help_text="The minimum score / similarity a text query must have compared to this field to be considered relevant / similar (overriding the generators value)",
                        null=True,
                        verbose_name="Text Similarity Threshold",
                    ),
                ),
                (
                    "image_similarity_threshold",
                    models.FloatField(
                        blank=True,
                        help_text="The minimum score / similarity an image query must have compared to this field to be considered relevant / similar (overriding the generators value)",
                        null=True,
                        verbose_name="Image Similarity Threshold",
                    ),
                ),
                (
                    "is_available_for_filtering",
                    models.BooleanField(default=False, verbose_name="Available for filtering"),
                ),
                ("index_parameters", models.JSONField(blank=True, null=True, verbose_name="Index Parameters")),
                ("generator_parameters", models.JSONField(blank=True, null=True, verbose_name="Generator Parameters")),
                ("generating_condition", models.TextField(blank=True, null=True, verbose_name="Generating Condition")),
                (
                    "source_fields",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of source field identifiers",
                        null=True,
                        verbose_name="Source Fields Plain",
                    ),
                ),
                (
                    "should_be_generated",
                    models.BooleanField(
                        default=False,
                        help_text="Should be generated for new elements and when source fields are updated, not automatically generated for exisitng elements",
                        verbose_name="Generate on insert / change",
                    ),
                ),
                (
                    "embedding_space",
                    models.ForeignKey(
                        blank=True,
                        help_text="If not set, embedding space of generator will be used",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="data_map_backend.embeddingspace",
                        verbose_name="Embedding Space",
                    ),
                ),
                (
                    "generator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="data_map_backend.generator",
                        verbose_name="Generator",
                    ),
                ),
                (
                    "schema",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="object_fields",
                        to="data_map_backend.datasetschema",
                        verbose_name="Schema",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dataset Field",
                "verbose_name_plural": "Dataset Fields",
                "order_with_respect_to": "schema",
                "unique_together": {("schema", "identifier")},
            },
        ),
    ]
